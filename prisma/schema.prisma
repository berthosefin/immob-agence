generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Application
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String?
  password      String
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Property {
  id          String           @id @default(uuid())
  title       String
  description String
  surface     Int
  rooms       Int
  bedrooms    Int
  floor       Int
  price       Int
  city        String
  address     String
  postal_code String
  sold        Boolean
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  options     PropertyOption[]
}

model Option {
  id         String           @id @default(uuid())
  name       String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  properties PropertyOption[]
}

model PropertyOption {
  id         String   @id @default(uuid())
  property   Property @relation(fields: [propertyId], references: [id])
  option     Option   @relation(fields: [optionId], references: [id])
  propertyId String
  optionId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
